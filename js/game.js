// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Game = (function() {
    function Game() {
      this.buildCharacter = __bind(this.buildCharacter, this);
    }

    Game.prototype.init = function() {
      this.keysDown = {};
      this.players = [];
      this.magics = {};
      this.player_count = 1;
      this.stageInit();
      this.serverInit();
      this.localPlayer = null;
      createjs.Ticker.setFPS(60);
      this.ready = false;
      this.lastKeyPress = new Date();
      return this.addEventHandlers();
    };

    Game.prototype.serverInit = function() {
      var connectURL, q;
      if (this.id === null) {
        q = "?name=" + this.username;
      } else {
        q = "?id=" + this.id + "&name=" + this.username;
      }
      connectURL = "localhost/" + q;
      this.socket = io.connect(connectURL, {
        port: 3000,
        transports: ["websocket"],
        'force new connection': true
      });
      return console.log('\t connected to server');
    };

    Game.prototype.stageInit = function() {
      var bar, canvas;
      console.log('\t stage init...');
      canvas = document.getElementById("gameCanvas");
      bar = document.getElementById("hud");
      this.world = new World(canvas, bar);
      return console.log('\t stage completed');
    };

    Game.prototype.addEventHandlers = function() {
      this.socket.on("connected", this.onConnected.bind(this));
      this.socket.on("fail", this.onConnectionFail.bind(this));
      this.socket.on("joined", this.gameSetup.bind(this));
      this.socket.on("start", this.gameStart.bind(this));
      this.socket.on("update", this.onUpdate.bind(this));
      this.socket.on("remove", this.onRemove.bind(this));
      this.socket.on("new player", this.onNewPlayer.bind(this));
      this.socket.on("player disconnect", this.onPlayerDisconnect.bind(this));
      return createjs.Ticker.addEventListener("tick", this.onTick.bind(this));
    };

    Game.prototype.onUpdate = function(data) {
      var magic, magicName, magicSheetInfo, object, player, _i, _len, _ref, _ref1, _results;
      _ref = data.objects;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        if ((_ref1 = object.type) === "player" || _ref1 === "robot") {
          player = this.world.getPlayer(object.id);
          if (player !== null) {
            player.update(object);
          }
        }
        if (object.type === "magic") {
          magic = this.world.getObject(object.id);
          if (magic === null) {
            magicName = object.name;
            magicSheetInfo = this.magics[magicName];
            magic = new Magic(object.id, object.name, object.x, object.y, this.world, object.characterID, object.direction, magicSheetInfo);
          } else {
            magic.get().x = object.x;
            magic.get().y = object.y;
          }
        }
        _results.push(this.world.get().sortChildren(this.renderOrder));
      }
      return _results;
    };

    Game.prototype.renderOrder = function(obj1, obj2) {
      if (obj1.y > obj2.y) {
        return 1;
      }
      if (obj1.y < obj2.y) {
        return -1;
      }
      return 0;
    };

    Game.prototype.onRemove = function(data) {
      var target;
      target = this.world.getObject(data.object.id);
      if (target !== null) {
        return this.world.removeObject(target);
      }
    };

    Game.prototype.onConnected = function(data) {
      this.userid = data.id;
      this.id = data.gameid;
      console.log('client id is ' + this.userid);
      return console.log('game id is ' + this.gameid);
    };

    Game.prototype.onConnectionFail = function(data) {
      console.log("connection failed");
      return this.socket.disconnect();
    };

    Game.prototype.gameSetup = function(data) {
      var character, player, _i, _len, _ref;
      if (data.gamestate) {
        this.gameStart();
      }
      this.id = data.gameid;
      this.world.build(data.world);
      createjs.Ticker.addEventListener("tick", this.world.stage);
      character = this.buildCharacter(data.character);
      this.world.addPlayer(character, this.player_count);
      this.localPlayer = character;
      this.localPlayer.isLocal = true;
      this.localPlayer.username = this.username;
      this.addPlayerUI(this.localPlayer, this.player_count);
      this.player_count += 1;
      console.log(character.name + ' has joined game');
      _ref = data.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.id === this.localPlayer.id) {
          continue;
        }
        character = this.buildCharacter(player);
        this.world.addPlayer(character, this.player_count);
        this.addPlayerUI(player, this.player_count);
        this.player_count += 1;
        console.log(character.name + ' has joined game');
      }
      createjs.Ticker.addEventListener("tick", (function(evt) {}).bind(this));
      window.addEventListener("keydown", (function(e) {
        return this.keysDown[e.keyCode] = true;
      }).bind(this));
      window.addEventListener("keyup", (function(e) {
        this.keysDown[e.keyCode] = false;
        if (!this.keysDown[Constant.KEYCODE_RIGHT] && !this.keysDown[Constant.KEYCODE_LEFT] && !this.keysDown[Constant.KEYCODE_UP] && !this.keysDown[Constant.KEYCODE_DOWN]) {
          if (this.localPlayer.state === "run") {
            return this.socket.emit("update", {
              id: this.userid,
              action: "keyup"
            });
          }
        }
      }).bind(this));
      return this.localPlayer.get().addEventListener("animationend", ((function(_this) {
        return function(evt) {
          switch (_this.localPlayer.state) {
            case 'die':
              break;
            case 'disabled':
              break;
            case 'collided':
              break;
            case 'attack':
              _this.socket.emit("update", {
                id: _this.userid,
                action: "animationend"
              });
              return _this.localPlayer.idle();
            case 'hurt':
              _this.socket.emit("update", {
                id: _this.userid,
                action: "animationend"
              });
              return _this.localPlayer.idle();
            case 'cast':
              _this.socket.emit("update", {
                id: _this.userid,
                action: "animationend"
              });
              return _this.localPlayer.idle();
            default:
              return _this.localPlayer.idle();
          }
        };
      })(this)).bind(this));
    };

    Game.prototype.gameStart = function() {
      this.ready = true;
      return this.world.get().removeChild(this.world.helpText);
    };

    Game.prototype.onNewPlayer = function(data) {
      var player;
      if (this.localPlayer === null) {
        return;
      }
      if (!this.world.playerExists(data.id && data.id !== this.localPlayer.id)) {
        console.log('Add new player to stage ' + data.id);
        player = this.buildCharacter(data.player);
        this.world.addPlayer(player, this.player_count);
        this.addPlayerUI(player, this.player_count);
        return this.player_count += 1;
      }
    };

    Game.prototype.onPlayerDisconnect = function(data) {
      if (this.world.playerExists(data.id)) {
        console.log('player:' + data.id + ' leave the game');
        this.world.removeById(data.id);
        return this.player_count -= 1;
      }
    };

    Game.prototype.onTick = function(e) {
      if (this.checkState(this.localPlayer)) {
        if (this.keysDown[Constant.KEYCODE_J]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'attack'
          });
          this.localPlayer.state = "attack";
          return;
        }
        if (this.keysDown[Constant.KEYCODE_K]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'cast'
          });
          this.localPlayer.state = "cast";
          return;
        }
        if (this.keysDown[Constant.KEYCODE_RIGHT] && this.keysDown[Constant.KEYCODE_UP]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'ur'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_LEFT] && this.keysDown[Constant.KEYCODE_UP]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'ul'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_RIGHT] && this.keysDown[Constant.KEYCODE_DOWN]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'dr'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_LEFT] && this.keysDown[Constant.KEYCODE_DOWN]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'dl'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_RIGHT]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'right'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_LEFT]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'left'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_UP]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'up'
          });
          return;
        }
        if (this.keysDown[Constant.KEYCODE_DOWN]) {
          this.socket.emit("update", {
            id: this.userid,
            action: 'run',
            dir: 'down'
          });
        }
      }
    };

    Game.prototype.onKeyDown = function(e) {
      return this.keysDown[e.keyCode] = true;
    };

    Game.prototype.onKeyUp = function(e) {
      return this.keysDown[e.keyCode] = false;
    };

    Game.prototype.is_outofBound = function(object) {
      var bound;
      bound = this.world.getBound();
      return object.x > bound['x2'] || object.x < 0 || object.y > bound['y2'] || object.y < 0;
    };

    Game.prototype.checkState = function(player) {
      var _ref;
      if (player === null || this.ready === false) {
        return false;
      }
      if ((_ref = player.state) === 'collided' || _ref === 'disabled' || _ref === 'hurt' || _ref === "die") {
        return false;
      }
      return true;
    };

    Game.prototype.buildCharacter = function(object) {
      var character, magicName, magicSheetInfo;
      character = new Character(object.id, object.name, object.type, object.x, object.y, this.world);
      character.faceDirection = object.faceDirection;
      character.maxhp = object.maxhp;
      character.build(object.spriteSheetInfo, object.magicSheetInfo);
      magicSheetInfo = object.magicSheetInfo;
      magicName = object.magicInfo.name;
      this.magics[magicName] = magicSheetInfo;
      return character;
    };

    Game.prototype.addPlayerUI = function(player, number) {
      var img, imgURL, pnumber;
      imgURL = '"assets/spritesheets/' + player.name + '/profile.png"';
      img = '<img src=' + imgURL + ' class="my-thumbnail"/>';
      pnumber = "#player" + number;
      $('#hud > .row >' + pnumber + ' > .row >#stats >#name >h4').html(player.username);
      $('#hud > .row > ' + pnumber + ' > .row >#profile').append(img);
      return $('#hud > .row > ' + pnumber + ' > .row >#stats > .progress > #hp').html(player.maxhp);
    };

    return Game;

  })();

}).call(this);
