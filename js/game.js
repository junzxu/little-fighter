// Generated by CoffeeScript 1.7.1
(function() {
  window.Game = (function() {
    function Game() {
      this.Y_AXIS_THREASHOLD = 30;
    }

    Game.prototype.init = function() {
      this.keysDown = {};
      this.players = [];
      this.stageInit();
      this.serverInit();
      createjs.Ticker.setFPS(60);
      createjs.Ticker.addEventListener("tick", this.world.stage);
      this.ready = false;
      this.lastKeyPress = new Date();
      return this.addEventHandlers();
    };

    Game.prototype.serverInit = function() {
      this.socket = io.connect("http://localhost", {
        port: 8000,
        transports: ["websocket"]
      });
      return console.log(this.socket);
    };

    Game.prototype.stageInit = function() {
      var canvas, robot;
      canvas = document.getElementById("gameCanvas");
      this.world = new World(canvas);
      robot = new Character("julian", "robot", 400, 200, this.world);
      robot.id = 0;
      return this.world.addPlayer(robot);
    };

    Game.prototype.addEventHandlers = function() {
      this.socket.on("connect", this.onConnected.bind(this));
      this.socket.on("new player", this.onNewPlayer.bind(this));
      this.socket.on("client id", this.onReceivedClientID.bind(this));
      this.socket.on("update", this.onUpdate.bind(this));
      this.socket.on("disconnect", this.onDisconnect.bind(this));
      return createjs.Ticker.addEventListener("tick", this.onTick.bind(this));
    };

    Game.prototype.onUpdate = function(data) {
      var updatePlayer;
      if (data.id !== this.clientID) {
        console.log('update');
        updatePlayer = this.playerGet(data.id);
        updatePlayer.x = data.x;
        updatePlayer.y = data.y;
        updatePlayer.run(data.dir);
      }
      if (data.state) {
        if (data.state === "idle") {
          return console.log('IDLEEEEEEEE');
        }
      }
    };

    Game.prototype.onConnected = function() {};

    Game.prototype.onReceivedClientID = function(data) {
      this.socket.emit("new player", {
        id: data.id,
        x: 250,
        y: 250
      });
      return this.clientID = data.id;
    };

    Game.prototype.onNewPlayer = function(data) {
      var player;
      if (!(this.playerExists(data.id))) {
        console.log('Add new player to stage ' + data.id);
        player = new Character("firzen", "player", data.x, data.y, this.world);
        player.id = data.id;
        this.world.addPlayer(player);
      }
      if (data.id === this.clientID) {
        this.localPlayer = player;
        createjs.Ticker.addEventListener("tick", (function(evt) {}).bind(this));
        window.addEventListener("keydown", (function(e) {
          return this.keysDown[e.keyCode] = true;
        }).bind(this));
        return window.addEventListener("keyup", (function(e) {
          this.keysDown[e.keyCode] = false;
          if (!this.keysDown[Constant.KEYCODE_RIGHT] && !this.keysDown[Constant.KEYCODE_LEFT] && !this.keysDown[Constant.KEYCODE_UP] && !this.keysDown[Constant.KEYCODE_DOWN]) {
            if (player.character.currentAnimation === "run") {
              player.character.gotoAndPlay('idle');
            }
            return this.socket.emit("update", {
              id: this.clientID,
              x: this.localPlayer.x,
              y: this.localPlayer.y,
              state: "idle"
            });
          }
        }).bind(this));
      }
    };

    Game.prototype.onDisconnect = function(data) {
      return console.log('Player: ' + data.id + ' has disconnected');
    };

    Game.prototype.onTick = function(e) {
      if (this.keysDown[Constant.KEYCODE_D]) {
        this.localPlayer.run('right');
        this.socket.emit("update", {
          id: this.clientID,
          x: this.localPlayer.x,
          y: this.localPlayer.y,
          dir: "right"
        });
      }
      if (this.keysDown[Constant.KEYCODE_A]) {
        this.localPlayer.run('left');
        this.socket.emit("update", {
          id: this.clientID,
          x: this.localPlayer.x,
          y: this.localPlayer.y,
          dir: "left"
        });
      }
      if (this.keysDown[Constant.KEYCODE_S]) {
        this.socket.emit("update", {
          id: this.clientID,
          x: this.localPlayer.x,
          y: this.localPlayer.y,
          dir: "down"
        });
        this.localPlayer.run('down');
      }
      if (this.keysDown[Constant.KEYCODE_W]) {
        this.socket.emit("update", {
          id: this.clientID,
          x: this.localPlayer.x,
          y: this.localPlayer.y,
          dir: "up"
        });
        this.localPlayer.run('up');
      }
      if (this.keysDown[Constant.KEYCODE_J]) {
        this.localPlayer.attack();
        this.socket.emit("attack", {
          id: this.clientID,
          x: this.localPlayer.x,
          y: this.localPlayer.y
        });
      }
      if (this.keysDown[Constant.KEYCODE_K]) {
        this.localPlayer.cast();
        return this.socket.emit("magic", {
          id: this.clientID,
          x: this.localPlayer.x,
          y: this.localPlayer.y
        });
      }
    };

    Game.prototype.onKeyDown = function(e) {
      console.log("key down " + e.keyCode);
      return this.keysDown[e.keyCode] = true;
    };

    Game.prototype.onKeyUp = function(e) {
      console.log("key up " + e.keyCode);
      return this.keysDown[e.keyCode] = false;
    };

    Game.prototype.playerExists = function(id) {
      var p, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.id === id) {
          return true;
        }
      }
      return false;
    };

    Game.prototype.playerGet = function(id) {
      var p, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.id === id) {
          return p;
        }
      }
    };

    return Game;

  })();

}).call(this);
