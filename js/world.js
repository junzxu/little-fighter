// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.World = (function() {
    function World(canvas, players, objects) {
      this.canvas = canvas;
      this.players = players != null ? players : [];
      this.objects = objects != null ? objects : [];
      this.world = new createjs.Container();
      this.world.x = 0;
      this.world.y = 0;
      this.width;
      this.height;
      this.objects;
      this.players;
      this.init();
    }

    World.prototype.init = function() {
      this.stage = new createjs.Stage(this.canvas);
      this.width = this.stage.canvas.width;
      this.height = this.stage.canvas.height;
      return this.build();
    };

    World.prototype.build = function() {
      var object, _i, _len, _ref;
      this.background = new createjs.Bitmap("assets/background/1.png");
      this.world.addChild(this.background);
      _ref = this.objects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        console.log('add');
        this.world.addChild(object.get());
      }
      return this.stage.addChild(this.world);
    };

    World.prototype.moveCamera = function(x, y) {
      var Xdiff, Ydiff, object, _i, _len, _results;
      Xdiff = x - this.background.x;
      Ydiff = y - this.background.y;
      this.background.x = x;
      this.background.y = y;
      _results = [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        object.get().x += Xdiff;
        _results.push(object.get().y += Ydiff);
      }
      return _results;
    };

    World.prototype.setPosition = function(x, y) {
      this.world.x = x;
      return this.world.y = y;
    };

    World.prototype.addPlayer = function(player) {
      this.world.addChild(player.get());
      this.objects.push(player);
      return this.players.push(player);
    };

    World.prototype.addObject = function(object) {
      this.world.addChild(object.get());
      return this.objects.push(object);
    };

    World.prototype.removeObject = function(target) {
      var index, object, _i, _len, _ref, _results;
      _ref = this.objects;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        object = _ref[index];
        if (object.id === target.id) {
          _results.push(this.objects.splice(index, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    World.prototype.removePlayer = function(target) {
      var index, player, _i, _len, _ref, _results;
      _ref = this.playerss;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        player = _ref[index];
        if (player.id === target.id) {
          _results.push(this.players.splice(index, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    World.prototype.getPlayers = function() {
      return this.players;
    };

    World.prototype.getObjects = function() {
      return this.objects;
    };

    World.prototype.getBound = function() {
      return {
        "x1": 0,
        "x2": this.background.image.width,
        "y1": 0,
        "y2": this.background.image.height
      };
    };

    World.prototype.get = function() {
      return this.world;
    };

    World.prototype.detectCollision = function(e) {
      var index, o, object, object_list, pair, _i, _len, _ref, _results;
      object_list = [];
      if (this.objects.length === 0) {
        return;
      }
      _ref = this.objects;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        object = _ref[index];
        if (__indexOf.call(object_list, object) >= 0 || (object == null)) {
          continue;
        }
        pair = object.detectCollision();
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = pair.length; _j < _len1; _j++) {
            o = pair[_j];
            _results1.push(object_list.push(o));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return World;

  })();

}).call(this);
