// Generated by CoffeeScript 1.7.1
(function() {
  window.World = (function() {
    function World(canvas, bar, players, objects) {
      this.canvas = canvas;
      this.bar = bar;
      this.players = players != null ? players : [];
      this.objects = objects != null ? objects : [];
      this.world = new createjs.Container();
      this.world.x = 0;
      this.world.y = 100;
      this.hud = new createjs.Container();
      this.width = this.canvas.width;
      this.height = this.canvas.height - 100;
      this.objects;
      this.players;
      this.init();
    }

    World.prototype.init = function() {
      this.stage = new createjs.Stage(this.canvas);
      return this.build();
    };

    World.prototype.build = function() {
      var object, _i, _len, _ref;
      this.background = new createjs.Bitmap("assets/background/1.png");
      this.world.addChild(this.background);
      _ref = this.objects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        console.log('add');
        this.world.addChild(object.get());
      }
      this.stage.addChild(this.world);
      this.statusBar = new createjs.DOMElement(this.bar);
      this.hud.addChild(this.statusBar);
      return this.stage.addChild(this.hud);
    };

    World.prototype.moveCamera = function(x, y) {
      var Xdiff, Ydiff, object, _i, _len, _results;
      Xdiff = x - this.background.x;
      Ydiff = y - this.background.y;
      this.background.x = x;
      this.background.y = y;
      _results = [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        object.get().x += Xdiff;
        _results.push(object.get().y += Ydiff);
      }
      return _results;
    };

    World.prototype.setPosition = function(x, y) {
      this.world.x = x;
      return this.world.y = y;
    };

    World.prototype.addPlayer = function(player) {
      var count;
      this.world.addChild(player.get());
      this.objects.push(player);
      this.players.push(player);
      count = this.players.length;
      return player.number = count;
    };

    World.prototype.addObject = function(object) {
      this.world.addChild(object.get());
      return this.objects.push(object);
    };

    World.prototype.removeObject = function(target) {
      var index, object, _i, _len, _ref, _results;
      _ref = this.objects;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        object = _ref[index];
        if (object.id === target.id) {
          _results.push(this.objects.splice(index, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    World.prototype.removePlayer = function(target) {
      var index, player, _i, _len, _ref, _results;
      _ref = this.playerss;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        player = _ref[index];
        if (player.id === target.id) {
          _results.push(this.players.splice(index, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    World.prototype.getPlayers = function() {
      return this.players;
    };

    World.prototype.getObjects = function() {
      return this.objects;
    };

    World.prototype.getBound = function() {
      return {
        "x1": 0,
        "x2": this.background.image.width,
        "y1": 0,
        "y2": this.background.image.height
      };
    };

    World.prototype.get = function() {
      return this.world;
    };

    return World;

  })();

}).call(this);
