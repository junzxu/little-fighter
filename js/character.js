// Generated by CoffeeScript 1.7.1
(function() {
  window.Character = (function() {
    function Character(name, type, speed, x, y, stage, arena) {
      this.name = name;
      this.type = type;
      this.speed = speed;
      this.x = x;
      this.y = y;
      this.stage = stage;
      this.arena = arena;
      this.id;
      this.type;
      this.hp = 100;
      this.cd = 300;
      this.spriteSheetInfo;
      this.character;
      this.characterSpriteSheet;
      this.direction = "right";
      this.stage;
      this.arena;
      this.state = "idle";
      this.magicState = "ready";
      this.init();
    }

    Character.prototype.init = function() {
      var data;
      if (this.type === "robot") {
        data = eval(robot_schema);
      } else {
        data = eval(player_schema);
      }
      this.spriteSheetInfo = data.spriteSheetInfo;
      this.magicSheetInfo = data.magicSheetInfo;
      console.log('init');
      this.characterSpriteSheet = new createjs.SpriteSheet(this.spriteSheetInfo);
      this.character = new createjs.BitmapAnimation(this.characterSpriteSheet);
      this.character.x = this.x;
      this.character.y = this.y;
      this.character.gotoAndPlay("idle");
      return this.character.addEventListener("animationend", (function(evt) {
        switch (this.state) {
          case 'die':
            this.setState('idle');
            return this.rebirth();
          case 'hurt':
            return this.idle();
          default:
            return this.idle();
        }
      }).bind(this));
    };

    Character.prototype.addToStage = function(stage) {
      stage.addChild(this.character);
      return this.stage = stage;
    };

    Character.prototype.moveStep = function(direction) {
      var bound;
      bound = this.arena.getBound();
      switch (direction) {
        case "left":
          if (this.direction !== "left") {
            this.changeDirection("left");
          }
          if (this.character.x - this.speed > bound['x1']) {
            return this.character.x -= this.speed;
          } else {
            return this.character.x += this.speed;
          }
          break;
        case "right":
          if (this.direction !== "right") {
            this.changeDirection("right");
          }
          if (this.character.x + this.speed < bound['x2']) {
            return this.character.x += this.speed;
          } else {
            return this.character.x -= this.speed;
          }
          break;
        case "down":
          if (this.character.y + this.speed < bound['y2']) {
            return this.character.y += this.speed;
          } else {
            return this.character.y -= this.speed;
          }
          break;
        case "up":
          if (this.character.y - this.speed > bound['y1']) {
            return this.character.y -= this.speed;
          } else {
            return this.character.y += this.speed;
          }
      }
    };

    Character.prototype.run = function(direction) {
      if (!this.checkState()) {
        return;
      }
      if (this.character.currentAnimation !== "run") {
        this.character.gotoAndPlay("run");
      }
      this.state = "run";
      this.moveStep(direction);
      this.character.localToGlobal(this.x, this.y);
      this.x = this.character.x;
      return this.y = this.character.y;
    };

    Character.prototype.attack = function() {
      if (this.character.currentAnimation === "idle") {
        return this.character.gotoAndPlay("attack");
      }
    };

    Character.prototype.cast = function() {
      var bound, m, width, x;
      if (this.character.currentAnimation === "idle" && this.magicState === 'ready') {
        bound = this.getRect();
        width = bound.x2 - bound.x1;
        x = this.direction === 'right' ? this.x + width : this.x - width;
        m = new Magic(this.character, this.magicSheetInfo, this.direction, x, this.y, this.stage, this.arena);
        m.cast();
        this.magicState = 'preparing';
        return createjs.Tween.get(this.character, {
          loop: false
        }).wait(this.cd).call(((function(_this) {
          return function() {
            return _this.magicState = "ready";
          };
        })(this)));
      }
    };

    Character.prototype.rebirth = function() {
      var bound, x, y;
      this.arena.container.removeChild(this.character);
      bound = this.arena.getBound();
      x = Math.floor(Math.random() * bound.x2);
      y = Math.floor(Math.random() * bound.y2);
      this.character.x = x;
      this.character.y = y;
      this.hp = 100;
      return createjs.Tween.get(this.character, {
        loop: false
      }).wait(3000).call(((function(_this) {
        return function() {
          _this.arena.container.addChild(_this.character);
          return _this.character.gotoAndPlay("idle");
        };
      })(this)));
    };

    Character.prototype.getRect = function() {
      var x1, x2, y1, y2;
      x1 = this.character.getBounds().x + this.character.x;
      y1 = this.character.getBounds().y + this.character.y;
      x2 = this.character.getBounds().x + this.character.x + this.character.getBounds().width;
      y2 = this.character.getBounds().y + this.character.y + this.character.getBounds().height;
      return {
        "x1": x1,
        "x2": x2,
        "y1": y1,
        "y2": y2
      };
    };

    Character.prototype.changeDirection = function(direction) {
      this.direction = direction;
      return this.character.scaleX = -this.character.scaleX;
    };

    Character.prototype.idle = function() {
      this.setState('idle');
      if (this.character.currentAnimation !== "idle") {
        return this.character.gotoAndPlay("idle");
      }
    };

    Character.prototype.gotHit = function(direction) {
      var bound;
      console.log('current hp: ' + this.hp);
      this.hp -= 10;
      if (this.hp <= 0) {
        this.character.gotoAndPlay("die");
        return this.setState('die');
      } else {
        this.setState('hurt');
        this.character.gotoAndPlay("hurt");
        bound = this.arena.getBound();
        return this.moveStep(direction);
      }
    };

    Character.prototype.setState = function(state) {
      return this.state = state;
    };

    Character.prototype.checkState = function() {
      var _ref;
      if ((_ref = this.character.currentAnimation) === "hurt" || _ref === "attack" || _ref === "disabled") {
        return false;
      } else {
        return true;
      }
    };

    Character.prototype.get = function() {
      return this.character;
    };

    return Character;

  })();

}).call(this);
