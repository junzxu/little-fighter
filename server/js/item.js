// Generated by CoffeeScript 1.7.1
(function() {
  var Item, object,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  object = require("./object.js");

  Item = (function(_super) {
    __extends(Item, _super);

    function Item(id, name, x, y, bound) {
      this.id = id;
      this.name = name;
      this.x = x;
      this.y = y;
      this.bound = bound;
      Item.__super__.constructor.call(this, this.name, "item", this.x, this.y, this.bound);
      this.setupInfo(item_schema.info);
      this.hp = this.maxhp;
      this.faceDirection = "right";
    }

    Item.prototype.init = function() {
      var item_schema, path;
      Item.__super__.init.apply(this, arguments);
      path = "./items/" + this.name + ".js";
      item_schema = require(path);
      this.spriteSheetInfo = item_schema.spriteSheetInfo;
      this.gotHit = item_schema.gotHit;
      if (item_schema.collide) {
        this.collide = item_schema.collide;
      }
      if (item_schema.collisionHandler) {
        return this.collisionHandler = item_schema.collisionHandler;
      }
    };

    Item.prototype.move = function(direction) {
      if (this.checkState()) {
        this.setState("run");
        this.speed = this.originSpeed;
        this.direction = direction;
        this.faceDirection = direction === "left" || direction === "ul" || direction === 'dl' ? "left" : "right";
        this.moveStep();
        return true;
      }
      return false;
    };

    Item.prototype.idle = function() {
      this.state = 'idle';
      this.speed = 0;
      return this.direction = "No";
    };

    Item.prototype.gotHit = function(damage, direction) {};

    Item.prototype.collide = function(direction) {};

    Item.prototype.setState = function(state, animation) {
      if (animation == null) {
        animation = null;
      }
      this.state = state;
      if (animation !== null) {
        this.animation = animation;
      }
      switch (state) {
        case "idle":
          return this.idle();
        default:
          return setTimeout((function() {
            return this.idle();
          }).bind(this), this.animationTime());
      }
    };

    Item.prototype.animationTime = function(act) {
      if (act == null) {
        act = null;
      }
      if (act === null) {
        act = this.state;
      }
      switch (act) {
        case 'collided':
          return 100;
        case 'hurt':
          return 100;
      }
    };

    Item.prototype.checkState = function() {
      var _ref;
      if ((_ref = this.state) === "collided" || _ref === "removed" || _ref === "hurt") {
        return false;
      } else {
        return true;
      }
    };

    Item.prototype.getStatus = function() {
      this.info.x = this.x;
      this.info.y = this.y;
      this.info.state = this.state;
      this.info.animation = this.animation;
      this.info.direction = this.direction;
      this.info.faceDirection = this.faceDirection;
      this.info.hp = this.hp;
      return this.info;
    };

    return Item;

  })(object);

  module.exports = Item;

}).call(this);
