// Generated by CoffeeScript 1.7.1
(function() {
  var Player, object, player_schema,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  object = require("./object.js");

  player_schema = require("./player_schema.js");

  Player = (function(_super) {
    __extends(Player, _super);

    function Player(id, name, type, x, y, world) {
      this.id = id;
      this.name = name;
      this.type = type;
      this.x = x;
      this.y = y;
      this.world = world;
      Player.__super__.constructor.call(this, this.name, this.type, this.x, this.y, this.world);
      this.hp = 100;
      this.cd = 300;
      this.damage = 15;
      this.attackRange = 70;
      this.number;
      this.faceDirection = "right";
    }

    Player.prototype.init = function() {
      Player.__super__.init.apply(this, arguments);
      this.width = 80;
      this.height = 80;
      this.spriteSheetInfo = player_schema.spriteSheetInfo;
      return this.magicSheetInfo = player_schema.magicSheetInfo;
    };

    Player.prototype.move = function(direction) {
      if (this.checkState()) {
        this.setState("run");
        this.speed = this.originSpeed;
        this.direction = direction;
        this.faceDirection = direction === "left" || direction === "ul" || direction === 'dl' ? "left" : "right";
        this.moveStep();
        return true;
      }
      return false;
    };

    Player.prototype.attack = function() {
      if (this.checkState()) {
        if (this.state !== "attack") {
          this.setState("attack");
          return true;
        }
      }
      return false;
    };

    Player.prototype.cast = function() {
      if (this.checkState() && this.magicState === 'ready') {
        this.magicState = 'preparing';
        if (this.state !== "cast") {
          this.setState("cast");
        }
        setTimeout(((function(_this) {
          return function() {
            return _this.magicState = "ready";
          };
        })(this)), this.cd);
        return true;
      }
      return false;
    };

    Player.prototype.rebirth = function() {
      var bound;
      this.idle();
      bound = this.world.getBound();
      this.x = Math.floor(Math.random() * bound.x2);
      this.y = Math.floor(Math.random() * bound.y2);
      return this.hp = 100;
    };

    Player.prototype.idle = function() {
      this.state = 'idle';
      this.speed = 0;
      return this.direction = "No";
    };

    Player.prototype.gotHit = function(damage, direction) {
      if (this.state === "die") {
        return;
      }
      this.hp -= damage;
      if (this.hp <= 0) {
        return this.setState('die');
      } else {
        this.setState('hurt');
        this.faceDirection = direction;
        return this.moveStep(this.counterDirection(direction));
      }
    };

    Player.prototype.setState = function(state) {
      this.state = state;
      switch (state) {
        case "idle":
          return this.idle();
        case "die":
          return setTimeout(((function(_this) {
            return function() {
              return _this.rebirth();
            };
          })(this)), this.animationTime());
        case "collided":
          return setTimeout((function() {
            return this.idle();
          }).bind(this), this.animationTime());
      }
    };

    Player.prototype.animationTime = function(act) {
      if (act == null) {
        act = null;
      }
      if (act === null) {
        act = this.state;
      }
      switch (act) {
        case 'die':
          return 3000;
        case 'collided':
          return 100;
        default:
          return null;
      }
    };

    Player.prototype.checkState = function() {
      var _ref;
      if ((_ref = this.state) === "disabled" || _ref === "collided" || _ref === "die" || _ref === "hurt") {
        return false;
      } else {
        return true;
      }
    };

    return Player;

  })(object);

  module.exports = Player;

}).call(this);
