// Generated by CoffeeScript 1.7.1
(function() {
  var Magic, object,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  object = require("./object.js");

  Magic = (function(_super) {
    __extends(Magic, _super);

    function Magic(id, info, x, y, characterID, direction) {
      this.id = id;
      this.info = info;
      this.x = x;
      this.y = y;
      this.characterID = characterID;
      this.direction = direction;
      this.moveStep = __bind(this.moveStep, this);
      Magic.__super__.constructor.call(this, this.info.name, 'magic', this.x, this.y, null);
    }

    Magic.prototype.init = function() {
      this.originSpeed = this.info.originSpeed;
      this.speed = this.originSpeed;
      this.damage = this.info.damage;
      this.collisionHeight = 0;
      this.collisionWidth = 0;
      this.width = this.info.width;
      this.height = this.info.height;
      this.setState("run");
      return this.info = {
        'id': this.id,
        'name': this.name,
        'type': this.type,
        'width': this.width,
        'height': this.height,
        'originSpeed': this.originSpeed
      };
    };

    Magic.prototype.collisionHandler = function(o) {
      if (o.id !== this.characterID) {
        o.gotHit(this.damage, this.counterDirection(this.direction));
        return this.state = "removed";
      }
    };

    Magic.prototype.moveStep = function(direction, speed) {
      if (direction == null) {
        direction = null;
      }
      if (speed == null) {
        speed = null;
      }
      if (direction === null) {
        direction = this.direction;
      }
      if (speed === null) {
        speed = this.speed;
      }
      switch (direction) {
        case "left":
          return this.x -= speed;
        case "right":
          return this.x += speed;
        case "down":
          return this.y += speed;
        case "up":
          return this.y -= speed;
      }
    };

    Magic.prototype.setState = function(state, animation) {
      if (animation == null) {
        animation = null;
      }
      this.state = state;
      if (animation !== null) {
        return this.animation = animation;
      } else {
        return this.animation = state;
      }
    };

    Magic.prototype.getStatus = function() {
      this.info.x = this.x;
      this.info.y = this.y;
      this.info.state = this.state;
      this.info.animation = this.animation;
      this.info.direction = this.direction;
      this.info.characterID = this.characterID;
      return this.info;
    };

    return Magic;

  })(object);

  module.exports = Magic;

}).call(this);
